% Cornell CS 2043: Unix Tools and Scripting
% Spring 2016
%
% http://cs2043-sp16.github.io/
%
% These slides have been created using the metroplis theme demo found here:
%
%     https://github.com/matze/mtheme.git
%
% I am a huge fan of the metropolis theme...thanks @matze!
\input{../common-header.input}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \begin
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{05 \-- Expansions and Regular Expressions}
\subtitle{CS 2043: Unix Tools and Scripting, Spring 2016 \cite{prevSemesters}}
\date{February 5th, 2016}
\author{Stephen McDowell}
\institute{Cornell University}

\begin{document}
\maketitle

% TOC
\begin{frame}{Table of contents}
  \setbeamertemplate{section in toc}[sections numbered]
  \tableofcontents[hideallsubsections]
\end{frame}

\begin{frame}{Some Logistics}
  \begin{leftemize}[<+- | alert@+>]
    \item The \texttt{assignments} repository on GitHub.
    \item Course pacing...
    \item HW1 tonight.
  \end{leftemize}
\end{frame}

%
%%
%%%
%%%%
%%%%% section shell_expansion
%%%%%
%%%%%
%%%%%
%%%%%
\section{Shell Expansion}
\label{sec:shell_expansion}

\begin{frame}[fragile]{Wildcards}
  \alert<1>{There are various special characters you have access too in your shell to expand phrases to match patterns,
    such as \texttt{*}, \texttt{?}, \texttt{\^{}}, \texttt{\{}, \texttt{\}}, \texttt{[}, \texttt{]}.}
  \pause
  \begin{itemize}[<+- | alert@+>]
    \item Any string.
    \item A single character.
    \item A phrase.
    \item A restricted set of characters.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Shell Expansion: Example}
  \begin{leftemize}
    \item The \texttt{*} matches any string, including the null string (e.g. 0 or more characters).
  \end{leftemize}
  \begin{center}
    {\small
    \begin{tabular}{|l|l|l|}
      \hline
      Input & Matched & Not Matched\\ \hline
      \texttt{Lec*} & \texttt{Lecture1.pdf Lec.avi} & \texttt{AlecBaldwin/}\\ \hline
      \texttt{L*ure*} & \texttt{Lecture2.pdf Lectures/} & \texttt{sure.txt}\\ \hline
      \texttt{*.tex} & \texttt{Lecture1.tex Presentation.tex} & \texttt{tex/}\\ \hline
    \end{tabular}
    }
  \end{center}
\end{frame}

\begin{frame}[fragile]{Shell Expansion: Example}
  \begin{leftemize}
    \item The \texttt{?} matches a single character.
  \end{leftemize}
  \begin{center}
    {\small
    \begin{tabular}{|l|l|l|}
      \hline
      Input & Matched & Not Matched\\ \hline
      \texttt{Lec?.pdf} & \texttt{Lec1.pdf Lec2.pdf} & \texttt{Lec11.pdf}\\ \hline
      \texttt{ca?} & \texttt{cat can cap} & \texttt{ca cake}\\ \hline
    \end{tabular}
    }
  \end{center}
\end{frame}

\begin{frame}[fragile]{Shell Expansion: Example}
  \begin{leftemize}
    \item Brace enumerations \texttt{[...]} match any character inside the square brackets.
    \begin{leftemize}
      \item Use a dash to indicate a range of characters.
      \item Can put commas between characters / ranges.
    \end{leftemize}
  \end{leftemize}
  \begin{center}
    {\small
    \begin{tabular}{|l|l|l|}
      \hline
      Input & Matched & Not Matched\\ \hline
      \texttt{[SL]ec*} & \texttt{Lecture Section} & \texttt{Vector.tex}\\ \hline
      \texttt{Day[1-3]} & \texttt{Day1 Day2 Day3} & \texttt{Day5}\\ \hline
      \texttt{[A-Z,a-z][0-9].mp3} & \texttt{A9.mp3 z4.mp3} & \texttt{Bz2.mp3 9a.mp3}\\ \hline
    \end{tabular}
    }
  \end{center}
\end{frame}

\begin{frame}[fragile]{Shell Expansion: Example}
  \begin{leftemize}
    \item The \texttt{\^{}} character is represents \emph{not}.
    \begin{leftemize}
      \item E.g. \texttt{[\^{}...]} matches any character \colbf{not} inside the square brackets.
    \end{leftemize}
  \end{leftemize}
  \begin{center}
    {\small
    \begin{tabular}{|l|l|l|}
      \hline
      Input & Matched & Not Matched\\ \hline
      \texttt{[\^{}A-P]ec*} & \texttt{Section.pdf} & \texttt{Lecture.pdf}\\ \hline
      \texttt{[\^{}A-Za-z]*} & \texttt{9Days.avi} & \texttt{vacation.jpg}\\ \hline
    \end{tabular}
    }
  \end{center}
\end{frame}

\begin{frame}[fragile]{Shell Expansion: Example}
  \begin{leftemize}
    \item \colbf{Brace Expansion}: \texttt{\{...,...\}} matches any phrase inside the comma-separated braces.
    \item Suports ranges as well!
    \item Brace expansion needs at least two options to choose from.
  \end{leftemize}\vspace*{-2ex}
  \begin{center}
    {\small
    \begin{tabular}{|l|l|}
      \hline
      Input & Matched\\ \hline
      \texttt{\{Hello,Goodbye\}\textbackslash World} & \texttt{Hello World Goodbye World}\\ \hline
      \texttt{\{Hi,Bye,Cruel\}\textbackslash World} & \texttt{Hi World By World Cruel World}\\ \hline
      \texttt{\{a..t\}} & Expands to the range \texttt{a} ... \texttt{t}\\ \hline
      \texttt{\{1..99\}} & Expands to the range \texttt{1} ... \texttt{99}\\ \hline
    \end{tabular}
    }
  \end{center}
  \colbf{Note}: NO SPACES.
  We haven't covered loops yet...but this is most useful when you want to do something like
  \begin{itemize}
    \item \texttt{for x in {1..99}; do echo \$x; done}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Combining Them}
  Of course, you can combine all of these!

  \begin{center}
    {\small
    \begin{tabular}{|l|l|l|}
      \hline
      Input & Matched & Not Matched\\ \hline
      \texttt{*h[0-9]*} & \texttt{h3 h3llo.txt} & \texttt{hello.txt}\\ \hline
      \texttt{[bf][ao][row].mp?} & \texttt{bar.mp3 foo.mpg} & \texttt{foo.mpeg}\\ \hline
    \end{tabular}
    }
  \end{center}
\end{frame}

\begin{frame}[fragile]{Interpreting Special Characters}
  \alert<1>{The special characters are}
  \begin{center}
    \alert<1>{\texttt{\$ * < > \& ? \{ \} [ ]}}
  \end{center}
  \pause
  \begin{itemize}[<+- | alert@+>]
    \item The shell interprets them in a special way unless we escape them (\texttt{\textbackslash\$}), or place
          them in quotes ("\$").
    \item When we first invoke a command, the shell first translates it from a string of characters to a Unix
          command that it understands.
    \item A shell's ability to interpret and expand commands is one of the powers of shell scripting.
    \item These will become your friends, and we'll see them again...
  \end{itemize}
\end{frame}
%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section shell_expansion
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section sets_regular_expressions_and_usage
%%%%%
%%%%%
%%%%%
%%%%%
\section{Sets, Regular Expressions, and Usage}
\label{sec:sets_regular_expressions_and_usage}

\begin{frame}[fragile]{\texttt{tr} Revisited}
  \alert<1>{The \texttt{tr} does not understand regular expressions per se (and really for the task it is designed for they
    don't make sense), but it \colbf{does} understand ranges and \texttt{POSIX} character sets:}
  \pause
  \begin{block}{Useful Sets}
    \wl
    \begin{center}
      \begin{tabular}{|c|l|}
        \hline
        \texttt{[:alnum:]} & alphanumeric characters\\ \hline
        \texttt{[:alpha:]} & alphabetic characters\\ \hline
        \texttt{[:digit:]} & digits\\ \hline
        \texttt{[:punct:]} & punctuation characters\\ \hline
        \texttt{[:lower:]} & lowercase letters\\ \hline
        \texttt{[:upper:]} & uppercase letters\\ \hline
        \texttt{[:space:]} & whitespace characters\\ \hline
      \end{tabular}
    \end{center}
    \wl
  \end{block}
\end{frame}

\begin{frame}[fragile]{If you Leave this Class with Anything...}
  \alert<1>{Quite possibly the two most common things anybody uses in a terminal:}
  \pause

  \begin{itemize}[<+- | alert@+>]
    \item \texttt{find}: searching for files / directories by name or attributes.
    \item \texttt{grep}: search contents of files.
    \item Used in conjunction with expansions, sets, and regular expressions.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Finding Yourself}
  \begin{block}{\colbf{find}}
    \texttt{find [where to look] criteria [what to do]}
    \begin{enumerate}[\--]
      \item Used to locate files or directories.
      \item Search any set of directories for files that match a criteria.
      \item Search by name, owner, group, type, permissions, last modification date, and \emph{more}.
      \item Search is recursive (will search all subdirectories too).
      \begin{enumerate}[\--]
        \item Sometimes you may need to limit the depth.
      \end{enumerate}
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Some Find Options}
  \begin{leftemize}
    \item[] \texttt{-name}: name of file or directory to look for.
    \item[] \texttt{-maxdepth num}: search at most \texttt{num} levels of directories.
    \item[] \texttt{-mindepth num}: search at least \texttt{num} levels of directories.
    \item[] \texttt{-amin n}: file last access was \texttt{n} minutes ago.
    \item[] \texttt{-atime n}: file last access was \texttt{n} days ago.
    \item[] \texttt{-group name}: file belongs to group \texttt{name}.
    \item[] \texttt{-path pattern}: file name matches shell pattern \texttt{pattern}.
    \item[] \texttt{-perm mode}: file permission bits are set to \texttt{mode}.
  \end{leftemize}

  Of course...a lot more in \colbf{man find}.
\end{frame}

\begin{frame}[fragile]{Some Details}
  \begin{leftemize}[<+- | alert@+>]
    \item This command is extremely powerful...but can be a little verbose.  That's normal.
    \item Normally all modifiers for \texttt{find} are evalulated in conjunction (a.k.a AND).  You can condition
          your arguments with an OR by passing the \texttt{-o} flag \emph{for each} modifier you want to be an OR.
    \item You can execute a command on found files / directories by using the \texttt{-exec} modifier, and \texttt{find}
          will execute the command for you.
    \begin{leftemize}
      \item The variable name is \texttt{\{\}}.
      \item You have to end the command with either a
      \begin{leftemize}
        \item \texttt{;} to execute the command on each individual result as you \emph{find} them.
        \item \texttt{+} to execute on all results once \emph{at the end}.
        \item \colbf{Note}: You have usually to escape them, e.g. \texttt{\textbackslash ;} and \texttt{\textbackslash +}
      \end{leftemize}
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Some Examples}
  \begin{block}{Find all files accessed at most 10 minutes ago}
    \texttt{find . -amin -10}
  \end{block}
  \begin{block}{Find all files accessed at least 10 minutes ago}
    \texttt{find . -amin +10}
  \end{block}
  \begin{block}{Display all the contents of files accessed in the last 10 minutes}
    \texttt{find . -amin -10 -exec cat {} +}
  \end{block}
  \begin{block}{Accidentally did \texttt{git add} on a Mac and ended up with \texttt{.DS\_Store} Everywhere? }
    \texttt{find . -name .DS\_Store -exec git rm -rf {} \;}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Time for the Magic}
  \begin{block}{\colbf{G}lobally Search a \colbf{R}egular \colbf{E}xpression and \colbf{P}rint}
    \texttt{grep <pattern> [input]}
    \begin{enumerate}[\--]
      \item Searches \texttt{input} for all lines containing \texttt{pattern}.
      \item As easy as specifying a \texttt{string} you need to find in a \texttt{file}.
      \item Or it can be much more.
      \item Common:
      \begin{enumerate}[\--]
        \item[] \texttt{<some\_command> | grep <thing you need to find>}
      \end{enumerate}
    \end{enumerate}
  \end{block}\wl

  Understanding how to use \texttt{grep} is really going to save you a lot of time in the future!
\end{frame}

\begin{frame}[fragile]{Grep Options}
  \begin{leftemize}
    \item[] \texttt{-i}: ignores case.
    \item[] \texttt{-A 20 -B 10}: print 10 lines before, and 20 lines after each match.
    \item[] \texttt{-v}: inverts the match.
    \item[] \texttt{-o}: shows only the matched substring.
    \item[] \texttt{-n}: displays the line number.
    \item[] \texttt{-H}: print the filename.
    \item[] \texttt{--exclude <glob>}: ignore \texttt{glob} e.g. \texttt{--exclude *.o}
    \item[] \texttt{-r}: recursive, search subdirectories too.
    \begin{leftemize}
      \item \colbf{Note:} you're Unix version may differentiate between \texttt{-r} and \texttt{-R}, check the
            \texttt{man} page.  We'll cover what that means soon.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Regular Expressions}
  \begin{leftemize}[<+- | alert@+>]
    \item \texttt{grep}, like many programs, takes in a \colbf{regular expression} as its \texttt{input}.
          Pattern matching with regular expressions is more sophisticated than shell expansions, and also uses
          different syntax.
    \item More precisely, a regular expression is a set of strings \-- these strings \colbf{match} the specified
          expression.
    \item When we use regular expressions, it is (usually) best to enclose them in quotes to stop the shell from
          expanding it before passing it to \texttt{grep} / other tools.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Regular Expression Notes}
  Some \texttt{regex} patterns perform the same tasks as the wildcards we learned:
  \begin{block}{Single Characters}
    Wild card: \texttt{?} \hspace*{2ex} Regex: \texttt{.}
    \begin{itemize}
      \item Matches any single character.
    \end{itemize}
    Wild card: \texttt{[a-z]} \hspace*{2ex} Regex: \texttt{[a-z]}
    \begin{itemize}
      \item Matches one of the indicated characters.
      \item Don't separate multiple characters with commas in the \texttt{regex} form (e.g. \texttt{[a,b,q-v]}
            becomes \texttt{[abq-v]}).
    \end{itemize}
  \end{block}
  \begin{block}{A Simple Example}
    \texttt{grep 't.a'} \-- prints lines like \texttt{tea}, \texttt{taa}, and \texttt{steap}.
  \end{block}
\end{frame}

\begin{frame}[fragile]{A Note on Ranges}
  \begin{leftemize}[<+- | alert@+>]
    \item Like shell wildcards, regexs are case-sensitive.  What if you want to match any letter, regardless of case?
    \begin{leftemize}
      \item If you take a look at the ASCII codes I keep mentioning in \cite{ascii}, you will see that the lower case
            letters come after the upper case letters.
      \item You should be careful about trying to do something like \texttt{[a-Z]}.
      \item Instead, just do \texttt{[a-zA-Z]}.
      \item \colbf{Note:} some programs very well could accept the range \texttt{[a-Z]} correctly.
    \end{leftemize}
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{Workarounds}
  \begin{leftemize}[<+- | alert@+>]
    \item \texttt{grep} accepts the \texttt{POSIX} sets we learned earlier!
    \begin{leftemize}
      \item e.g. \texttt{ls | grep [[:digit:]]} gives all files with numbers in the filename.
    \end{leftemize}
    \item \texttt{*} matches 0 or more occurences of the expression.
    \item \texttt{\textbackslash ?} matches 0 or 1 occurences of the expression.
    \item \texttt{\textbackslash +} matches 1 or more occurences of the expression.
    \item Remember that you can flip the expressions with the not signal: \texttt{\^{}}
    \item The \texttt{\$} can be used to match the end of the line.
  \end{leftemize}
\end{frame}

\begin{frame}[fragile]{To be continued...}
  There's a lot more going on here.  We'll come back to it soon!
\end{frame}

%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section sets_regular_expressions_and_usage
%%%%
%%%
%%
%

%
%%
%%%
%%%%
%%%%% section more_git
%%%%%
%%%%%
%%%%%
%%%%%
\section{More Git}
\label{sec:more_git}

\begin{frame}[fragile]{Syncing a Fork...}
  ...again!
\end{frame}

%%%%%
%%%%%
%%%%%
%%%%%
%%%%% section more_git
%%%%
%%%
%%
%

\begin{frame}[allowframebreaks]{References}
  \bibliography{references}
  \bibliographystyle{abbrv}
\end{frame}

\end{document}
